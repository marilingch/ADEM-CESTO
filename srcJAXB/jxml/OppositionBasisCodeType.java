//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.11 at 12:27:12 AM CET 
//


package jxml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for OppositionBasisCodeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="OppositionBasisCodeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="Mark"/>
 *     &lt;enumeration value="Registered mark with reputation"/>
 *     &lt;enumeration value="Well-known mark"/>
 *     &lt;enumeration value="Non-registered mark"/>
 *     &lt;enumeration value="Sign used in trade"/>
 *     &lt;enumeration value="Mark filed by an agent"/>
 *     &lt;enumeration value="Undefined"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "OppositionBasisCodeType")
@XmlEnum
public enum OppositionBasisCodeType {

    @XmlEnumValue("Mark")
    MARK("Mark"),
    @XmlEnumValue("Registered mark with reputation")
    REGISTERED_MARK_WITH_REPUTATION("Registered mark with reputation"),
    @XmlEnumValue("Well-known mark")
    WELL_KNOWN_MARK("Well-known mark"),
    @XmlEnumValue("Non-registered mark")
    NON_REGISTERED_MARK("Non-registered mark"),
    @XmlEnumValue("Sign used in trade")
    SIGN_USED_IN_TRADE("Sign used in trade"),
    @XmlEnumValue("Mark filed by an agent")
    MARK_FILED_BY_AN_AGENT("Mark filed by an agent"),
    @XmlEnumValue("Undefined")
    UNDEFINED("Undefined");
    private final String value;

    OppositionBasisCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static OppositionBasisCodeType fromValue(String v) {
        for (OppositionBasisCodeType c: OppositionBasisCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
