//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.11 at 12:27:12 AM CET 
//


package jxml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RepresentativeKindCodeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RepresentativeKindCodeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="Professional Representative"/>
 *     &lt;enumeration value="Lawyer"/>
 *     &lt;enumeration value="Association"/>
 *     &lt;enumeration value="Employee"/>
 *     &lt;enumeration value="Employee with Economic Connections"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="Undefined"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RepresentativeKindCodeType")
@XmlEnum
public enum RepresentativeKindCodeType {

    @XmlEnumValue("Professional Representative")
    PROFESSIONAL_REPRESENTATIVE("Professional Representative"),
    @XmlEnumValue("Lawyer")
    LAWYER("Lawyer"),
    @XmlEnumValue("Association")
    ASSOCIATION("Association"),
    @XmlEnumValue("Employee")
    EMPLOYEE("Employee"),
    @XmlEnumValue("Employee with Economic Connections")
    EMPLOYEE_WITH_ECONOMIC_CONNECTIONS("Employee with Economic Connections"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("Undefined")
    UNDEFINED("Undefined");
    private final String value;

    RepresentativeKindCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RepresentativeKindCodeType fromValue(String v) {
        for (RepresentativeKindCodeType c: RepresentativeKindCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
